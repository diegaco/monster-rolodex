{"version":3,"sources":["logo.svg","components/Card/Card.component.jsx","components/CardList/CardList.component.jsx","components/SearchBox/SearchBox.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","key","SearchBox","placeholder","handleSearch","searchField","type","onChange","value","App","e","setState","target","state","fetch","then","res","json","data","this","monstersToRender","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wKAAAA,EAAOC,QAAU,IAA0B,kC,2LCG9BC,G,kBAAO,SAACC,GAAD,OAClB,yBAAKC,UAAU,kBACb,yBAAKC,IAAG,mCAA8BF,EAAMG,QAAQC,GAA5C,0BAAwEC,IAAG,kBAAaL,EAAMG,QAAQG,QAC9G,4BACGN,EAAMG,QAAQG,MAEjB,2BACGN,EAAMG,QAAQI,UCNRC,G,MAAW,SAACR,GAAD,OACtB,yBAAKC,UAAU,aAEXD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OACxB,kBAAC,EAAD,CAAMQ,IAAKR,EAAQC,GAAID,QAASA,UCL3BS,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAcC,EAA7B,EAA6BA,YAA7B,OACvB,yBAAKd,UAAU,cACb,2BACEA,UAAU,SACVe,KAAK,SACLH,YAAaA,EACbI,SAAUH,EACVI,MAAOH,OCqCEI,E,YAvCb,aAAe,IAAD,8BACZ,+CAeFL,aAAe,SAACM,GACd,EAAKC,SAAS,CACZN,YAAaK,EAAEE,OAAOJ,SAhBxB,EAAKK,MAAQ,CACXd,SAAU,GACVM,YAAa,IAJH,E,iFAQO,IAAD,OAClBS,MAAM,8CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAI,EAAKP,SAAS,CAC1BZ,SAAUmB,S,+BAUN,IAAD,EAC2BC,KAAKN,MAA/Bd,EADD,EACCA,SAAUM,EADX,EACWA,YAEZe,EAAmBrB,EAASsB,QAAO,SAAA5B,GAAO,OAC5CA,EAAQG,KAAK0B,cAAcC,SAASlB,EAAYiB,kBAGpD,OACE,yBAAK/B,UAAU,OACb,mDACA,kBAAC,EAAD,CAAWY,YAAY,kBAAkBC,aAAce,KAAKf,aAAcC,YAAaA,IACvF,kBAAC,EAAD,CAAUN,SAAUqB,S,GAnCVI,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.67fd2f70.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport './Card.styles.css';\n\nexport const Card = (props) => (\n  <div className=\"card-container\">\n    <img src={`https://www.robohash.org/${props.monster.id}?set=set2&size=180x180`} alt={`Monster ${props.monster.name}`}/>\n    <h1>\n      {props.monster.name}\n    </h1>\n    <p>\n      {props.monster.email}\n    </p>\n  </div>\n)","import React from 'react'\nimport { Card } from '../Card/Card.component';\nimport './CardList.styles.css';\n\nexport const CardList = (props) => (\n  <div className=\"card-list\">\n    {\n      props.monsters.map(monster => (\n        <Card key={monster.id} monster={monster} />\n      ))\n    }\n  </div>\n);","import React from 'react';\nimport './SearchBox.styles.css';\n\nexport const SearchBox = ({placeholder, handleSearch, searchField}) => (\n  <div className=\"search-box\">\n    <input\n      className=\"search\"\n      type=\"search\"\n      placeholder={placeholder}\n      onChange={handleSearch}\n      value={searchField}\n    />\n  </div>\n)","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { CardList } from './components/CardList/CardList.component';\nimport { SearchBox } from './components/SearchBox/SearchBox.component';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(res => res.json())\n      .then(data => this.setState({\n        monsters: data\n      }));\n  }\n\n  handleSearch = (e) => {\n    this.setState({\n      searchField: e.target.value\n    })\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n\n    const monstersToRender = monsters.filter(monster => (\n        monster.name.toLowerCase().includes(searchField.toLowerCase())\n      ));\n\n    return (\n      <div className=\"App\">\n        <h1>Monster Rolodex App</h1>\n        <SearchBox placeholder=\"Search Monsters\" handleSearch={this.handleSearch} searchField={searchField}/>\n        <CardList monsters={monstersToRender} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}